<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic SYSTEM "https://resources.jetbrains.com/stardust/html-entities.dtd">

<topic xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/stardust/topic.v2.xsd"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       title="Configuration"
       id="Configurations">

    <p>
        Ktor allows you to configure various server parameters, such as a host address and port, <a href="Modules.md">modules</a> to load, enable the <a href="development_mode.xml">development mode</a>, and so on.
        The configuration depends on the way you used to create a server - <a href="create_server.xml">embeddedServer or EngineMain</a>:
    </p>
    <list>
        <li>
            <p>
                For <a anchor="embedded-server">embeddedServer</a>,
                you can configure server parameters in code by passing the required parameters to the <code>embeddedServer</code> constructor.
            </p>
        </li>
        <li>
            <p>
                For <code>EngineMain</code>, Ktor loads its configuration from an <a anchor="hocon-file">external file</a> that uses the <a href="https://github.com/lightbend/config/blob/master/HOCON.md">HOCON</a> format. This way provides more flexibility to configure a server and allows you to change a configuration without recompiling your application. Moreover, you can run your application from a command line and override the required server parameters by passing corresponding <a anchor="command-line">command-line</a> arguments.
            </p>
        </li>
    </list>


    <chapter title="embeddedServer" id="embedded-server">
        <p>
            The <a href="https://api.ktor.io/ktor-server/ktor-server-host-common/ktor-server-host-common/io.ktor.server.engine/embedded-server.html">embeddedServer</a> function accepts different parameters for configuring a server, including a <a href="Engines.md">server engine</a>, a host and port to listen, and so on.
            In this section, we'll take a look at several examples of running <code>embeddedServer</code> with different setting.
        </p>


        <chapter title="Basic configuration" id="embedded-basic">
            <p>
                The code snippet below shows the basic server setup with the Netty engine and the <code>8080</code> port.
            </p>
            <code style="block"
                  lang="kotlin"
                  src="snippets/_misc/EmbeddedServerConfigure.kt">
            </code>
        </chapter>

        <chapter title="Engine configuration" id="embedded-engine">
            <p>
                In the example below, we've added the <code>configure</code> parameter for configuring setting specific for a selected engine. You can learn more about configuring engines from <a href="Engines.md" anchor="configure-engine"/>.
            </p>
            <code style="block"
                  lang="kotlin"
                  src="snippets/_misc/EmbeddedServerConfigureEngine.kt">
            </code>
        </chapter>

        <chapter title="Custom environment" id="embedded-custom">
            <p>
                The example below shows how to run a server with a custom environment represented by the <a href="https://api.ktor.io/ktor-server/ktor-server-host-common/ktor-server-host-common/io.ktor.server.engine/-application-engine-environment/index.html">ApplicationEngineEnvironment</a> interface.
            </p>
            <code style="block"
                  lang="kotlin"
                  src="snippets/_misc/EmbeddedServerConfigureCustomEnv.kt">
            </code>

            <p>
                You can also use a custom environment to serve HTTPS. The <a href="https://github.com/ktorio/ktor-documentation/tree/main/codeSnippets/snippets/ssl-embedded-server">ssl-embedded-server</a> example shows how to do this.
            </p>
        </chapter>
    </chapter>


    <chapter title="HOCON file" id="hocon-file">
        <chapter title="Overview" id="hocon-overview">
            <p>
                If you use <a href="create_server.xml" anchor="engine-main">EngineMain</a> to start a server, Ktor loads configurations settings from the <path>application.conf</path> HOCON file placed in application resources.
                This file should contain at least <a href="Modules.md">modules to load</a> specified using the <code>ktor.application.modules</code> property, for example:
            </p>
            <code style="block">
                ktor {
                    application {
                        modules = [ com.example.ApplicationKt.module ]
                    }
                }
            </code>
            <p>
                In this case, Ktor will call the <code>Application.module</code> function for the <path>Application.kt</path> file below:
            </p>
            <code style="block"
                  lang="kotlin"
                  src="snippets/engine-main/src/main/kotlin/com/example/Application.kt">
            </code>
            <p>
                Besides modules to load, you can configure various server settings, including <a anchor="predefined-properties">predefined</a> (such as a port or host, SSL settings, etc.) and custom ones.
                Let's take a look at several examples.
            </p>
            <list>
                <li>
                    <p>
                        In the example below, a server listening port is set to <code>8080</code> using the <code>ktor.deployment.port</code> property.
                    </p>
                    <code style="block" src="snippets/engine-main/src/main/resources/application.conf"/>
                </li>
                <li>
                    <p>
                        The example below enables Ktor to listen on the <code>8443</code> SSL port and specifies the required <a href="ssl.md">SSL settings</a> in a separate <code>security</code> block.
                    </p>
                    <code style="block" src="snippets/ssl-engine-main/src/main/resources/application.conf"/>
                </li>
                <li>
                    <p>
                        The <path>application.conf</path> file below contains a custom <code>jwt</code> group to store <a href="jwt.md" anchor="jwt-settings">JWT</a> settings.
                    </p>
                    <code style="block" src="snippets/auth-jwt-hs256/src/main/resources/application.conf" lines="11-16"/>
                    <p>
                        You can <a anchor="read-configuration-in-code">read and handle such settings</a> in code.
                    </p>
                </li>
            </list>
        </chapter>



        <chapter title="Predefined properties" id="predefined-properties">
            <p>
                Below is a list of predefined settings that you can use inside a <a anchor="hocon-overview">configuration file</a>.
            </p>
            <list>
                <li>
                    <p>
                        <code>ktor.deployment.host</code>:
                         A host address.
                    </p>
                    <p>
                        <emphasis>Example</emphasis>: <code>0.0.0.0</code>
                    </p>
                </li>
                <li>
                    <p>
                        <code>ktor.deployment.port</code> / <code>ktor.deployment.sslPort</code>:
                         A listening port/SSL port.
                        Note that SSL requires additional options <a anchor="ssl">listed below</a>.
                    </p>
                    <p>
                        <emphasis>Example</emphasis>: <code>80</code> / <code>443</code>
                    </p>
                </li>
                <li>
                    <p>
                        <code>ktor.deployment.watch</code>:
                         Watch paths used for <a href="Auto_reload.xml" anchor="watch-paths">auto-reloading</a>.
                    </p>
                </li>
                <li>
                    <p>
                        <code>ktor.deployment.rootPath</code>:
                        A <a href="war.md">servlet</a> context path.
                    </p>
                    <p>
                        <emphasis>Example</emphasis>: <code>/</code>
                    </p>
                </li>
                <li>
                    <p>
                        <code>ktor.deployment.shutdown.url</code>:
                        A shutdown URL.
                        Note that this option uses the <a href="shutdown-url.md"/> plugin.
                    </p>
                </li>
                <li>
                    <p>
                        Properties specific for engines.
                        Learn more from <a href="Engines.md" anchor="engine-main-configure"/>.
                    </p>
                </li>
            </list>
            <p id="ssl">
                If you've set <code>ktor.deployment.sslPort</code>, you need to specify the following <a href="ssl.md">SSL-specific</a> properties:
            </p>
            <list>
                <li>
                    <p>
                        <code>ktor.security.ssl.keyStore</code>:
                         An SSL key store.
                    </p>
                </li>
                <li>
                    <p>
                        <code>ktor.security.ssl.keyAlias</code>:
                         An alias for the SSL key store.
                    </p>
                </li>
                <li>
                    <p>
                        <code>ktor.security.ssl.keyStorePassword</code>:
                        A password for the SSL key store.
                    </p>
                </li>
                <li>
                    <p>
                        <code>ktor.security.ssl.privateKeyPassword</code>:
                        A password for the SSL private key.
                    </p>
                </li>
            </list>

        </chapter>





        <chapter title="Command line" id="command-line">
            <p>
                If you use <a href="create_server.xml" anchor="engine-main">EngineMain</a> to create a server, you can run your application from a command line and override the required server parameters by passing corresponding command-line arguments. For example, you can override a port specified in the <path>application.conf</path> file in the following way:
            </p>
            <code style="block">
                java -jar sample-app.jar -port=8080
            </code>
            <p>
                The available command-line options are listed below:
            </p>
            <list>
                <li>
                    <p>
                        <code>jar</code>: A path to JAR file.
                    </p>
                </li>
                <li>
                    <p>
                        <code>config</code>: A path to a custom configuration file used instead of <path>application.conf</path> from resources.
                    </p>
                    <code style="block">
                        java -jar sample-app.jar -config=anotherfile.conf
                    </code>
                </li>
                <li>
                    <p>
                        <code>host</code>: A host address.
                    </p>
                </li>
                <li>
                    <p>
                        <code>port</code>: A listening port.
                    </p>
                </li>
                <li>
                    <p>
                        <code>watch</code>:
                        Watch paths used for <a href="Auto_reload.xml" anchor="watch-paths">auto-reloading</a>.
                    </p>
                </li>
            </list>
            <p>
                <a href="ssl.md">SSL-specific</a> options:
            </p>
            <list>
                <li>
                    <p>
                        <code>sslPort</code>: A listening SSL port.
                    </p>
                </li>
                <li>
                    <p>
                        <code>sslKeyStore</code>: An SSL key store.
                    </p>
                </li>
            </list>
            <p>
                If you need to override a <a anchor="predefined-properties">predefined property</a> that doesn't have a corresponding command-line option, use the <code>-P</code> flag, for example:
            </p>
            <code style="block">
                java -jar sample-app.jar -P:ktor.deployment.callGroupSize=7
            </code>
        </chapter>


        <chapter title="Environment variables" id="environment-variables">
            <p>
                In HOCON, you can substitute parameters with environment variables by using the <code>${ENV}</code> syntax.
                For example, you can assign the <code>PORT</code> environment variable to the <code>ktor.deployment.port</code> property in the following way:
            </p>
            <code style="block">
                ktor {
                    deployment {
                        port = ${PORT}
                    }
                }
            </code>
            <p>
                In this case, an environment variable value will be used to specify a listening port.
                If the <code>PORT</code> environment variable variable doesn't exist at runtime, you can provide a default port value before assigning <code>${?PORT}</code> as follows:
            </p>
            <code style="block">
                ktor {
                    deployment {
                        port = 8080
                        port = ${?PORT}
                    }
                }
            </code>
        </chapter>


        <chapter title="Read configuration in code" id="read-configuration-in-code">
            <p>
                Ktor allows you to access property values specified in <path>application.conf</path> in code.
                For example, if you've specified the <code>ktor.deployment.port</code> property,...
            </p>
            <code style="block">
                ktor {
                    deployment {
                        port = 8080
                    }
                }
            </code>
            <p>
                ... you can access the application's configuration using <a href="https://api.ktor.io/ktor-server/ktor-server-core/ktor-server-core/io.ktor.application/-application-environment/config.html">ApplicationEnvironment.config</a> and get the required property value in the following way:
            </p>
            <code style="block" lang="kotlin">
                fun Application.module(testing: Boolean = false) {
                    val port = environment.config.propertyOrNull("ktor.deployment.port")?.getString() ?: "8080"
                    routing {
                        get {
                            call.respondText("Listening on port $port")
                        }
                    }
                }
            </code>
            <p>
                This is especially useful when you keep <a anchor="custom-property">custom settings</a> in a configuration file and need to access its values.
            </p>
        </chapter>
    </chapter>








    <chapter title="Example: How to specify an environment using a custom property" id="custom-property">
        <p>
            You might want to do different things depending on whether a server is running locally or on a production machine.
            To achieve this, you can add a custom property in <path>application.conf</path> and initialize it with a dedicated <a anchor="environment-variables">environment variable</a> whose value depends on whether a server is running locally or on production. In the example below, the <code>KTOR_ENV</code> environment variable is assigned to a custom <code>ktor.environment</code> property.
        </p>
        <code style="block">
            ktor {
                environment = ${?KTOR_ENV}
            }
        </code>
        <p>
            You can access the <code>ktor.environment</code> value at runtime by <a anchor="read-configuration-in-code">reading configuration in code</a> and perform the required actions:
        </p>
        <code style="block" lang="kotlin">
            fun Application.module(testing: Boolean = false) {
                val env = environment.config.propertyOrNull("ktor.environment")?.getString()
                routing {
                    get {
                        call.respondText(when (env) {
                            "dev" -> "Development"
                            "prod" -> "Production"
                            else -> "..."
                        })
                    }
                }
            }
        </code>
    </chapter>

</topic>